"use client"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import {
  MessageCircle,
  Send,
  X,
  Minimize2,
  Maximize2,
  Bot,
  User,
  Mic,
  MicOff,
  Volume2,
  VolumeX,
  Heart,
  Phone,
} from "lucide-react"

interface Message {
  id: string
  text: string
  sender: "user" | "bot"
  timestamp: Date
  language?: string
}

interface SpeechRecognitionEvent {
  results: {
    [key: number]: {
      [key: number]: {
        transcript: string
      }
    }
  }
}

interface SpeechRecognition {
  continuous: boolean
  interimResults: boolean
  lang: string
  start(): void
  stop(): void
  onresult: (event: SpeechRecognitionEvent) => void
  onerror: () => void
  onend: () => void
}

declare global {
  interface Window {
    SpeechRecognition: new () => SpeechRecognition
    webkitSpeechRecognition: new () => SpeechRecognition
  }
}

export function FloatingChatbot() {
  const [isOpen, setIsOpen] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [messages, setMessages] = useState<Message[]>([])
  const [inputText, setInputText] = useState("")
  const [isListening, setIsListening] = useState(false)
  const [isSpeaking, setIsSpeaking] = useState(false)
  const [currentLanguage, setCurrentLanguage] = useState("en")
  const [isLoading, setIsLoading] = useState(false)
  const [hasNewMessage, setHasNewMessage] = useState(false)

  const recognitionRef = useRef<SpeechRecognition | null>(null)
  const scrollAreaRef = useRef<HTMLDivElement>(null)

  const languages = [
    { code: "en", name: "English", flag: "ЁЯЗ║ЁЯЗ╕" },
    { code: "hi", name: "рд╣рд┐рдВрджреА", flag: "ЁЯЗоЁЯЗ│" },
    { code: "mr", name: "рдорд░рд╛рдареА", flag: "ЁЯЗоЁЯЗ│" },
    { code: "ta", name: "родрооро┐ро┤рпН", flag: "ЁЯЗоЁЯЗ│" },
    { code: "bn", name: "ржмрж╛ржВрж▓рж╛", flag: "ЁЯЗзЁЯЗй" },
    { code: "te", name: "р░др▒Жр░▓р▒Бр░Чр▒Б", flag: "ЁЯЗоЁЯЗ│" },
    { code: "gu", name: "ркЧрлБркЬрк░рк╛ркдрлА", flag: "ЁЯЗоЁЯЗ│" },
    { code: "kn", name: "р▓Хр▓ир│Нр▓ир▓б", flag: "ЁЯЗоЁЯЗ│" },
  ]

  // Initialize speech recognition
  useEffect(() => {
    if (typeof window !== "undefined") {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
      if (SpeechRecognition) {
        recognitionRef.current = new SpeechRecognition()
        recognitionRef.current.continuous = false
        recognitionRef.current.interimResults = false
        recognitionRef.current.lang = getLanguageCode(currentLanguage)

        recognitionRef.current.onresult = (event: SpeechRecognitionEvent) => {
          const transcript = event.results[0][0].transcript
          setInputText(transcript)
          setIsListening(false)
        }

        recognitionRef.current.onerror = () => {
          setIsListening(false)
        }

        recognitionRef.current.onend = () => {
          setIsListening(false)
        }
      }
    }
  }, [currentLanguage])

  // Initialize welcome message when chat opens
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessage: Message = {
        id: "welcome",
        text: getWelcomeMessage(currentLanguage),
        sender: "bot",
        timestamp: new Date(),
        language: currentLanguage,
      }
      setMessages([welcomeMessage])
    }
  }, [isOpen, currentLanguage])

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (scrollAreaRef.current) {
      const scrollElement = scrollAreaRef.current.querySelector("[data-radix-scroll-area-viewport]")
      if (scrollElement) {
        scrollElement.scrollTop = scrollElement.scrollHeight
      }
    }
  }, [messages])

  // Show notification for new messages when chat is closed
  useEffect(() => {
    if (!isOpen && messages.length > 1) {
      setHasNewMessage(true)
      const timer = setTimeout(() => setHasNewMessage(false), 5000)
      return () => clearTimeout(timer)
    }
  }, [messages, isOpen])

  const getLanguageCode = (lang: string): string => {
    const codes: { [key: string]: string } = {
      en: "en-US",
      hi: "hi-IN",
      mr: "mr-IN",
      ta: "ta-IN",
      bn: "bn-BD",
      te: "te-IN",
      gu: "gu-IN",
      kn: "kn-IN",
    }
    return codes[lang] || "en-US"
  }

  const getWelcomeMessage = (lang: string): string => {
    const welcomeMessages: { [key: string]: string } = {
      en: "ЁЯй║ Hello! I'm your AI Health Assistant for HopeLink. I can help you with:\n\nтАв Medical information about Thalassemia\nтАв Blood donation guidance\nтАв Emergency assistance\nтАв Hospital locations\nтАв Health tips and support\n\nHow can I assist you today?",
      hi: "ЁЯй║ рдирдорд╕реНрддреЗ! рдореИрдВ HopeLink рдХрд╛ AI рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:\n\nтАв рдереИрд▓реЗрд╕реАрдорд┐рдпрд╛ рдХреА рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЬрд╛рдирдХрд╛рд░реА\nтАв рд░рдХреНрддрджрд╛рди рдорд╛рд░реНрдЧрджрд░реНрд╢рди\nтАв рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛\nтАв рдЕрд╕реНрдкрддрд╛рд▓ рд╕реНрдерд╛рди\nтАв рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реБрдЭрд╛рд╡ рдФрд░ рд╕рд╣рд╛рдпрддрд╛\n\nрдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
      mr: "ЁЯй║ рдирдорд╕реНрдХрд╛рд░! рдореА HopeLink рдЪрд╛ AI рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗред рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдорджрдд рдХрд░реВ рд╢рдХрддреЛ:\n\nтАв рдереЕрд▓реЗрд╕реЗрдорд┐рдпрд╛рдЪреА рд╡реИрджреНрдпрдХреАрдп рдорд╛рд╣рд┐рддреА\nтАв рд░рдХреНрддрджрд╛рди рдорд╛рд░реНрдЧрджрд░реНрд╢рди\nтАв рдЖрдкрддреНрдХрд╛рд▓реАрди рдорджрдд\nтАв рд░реБрдЧреНрдгрд╛рд▓рдпрд╛рдЪреЗ рд╕реНрдерд╛рди\nтАв рдЖрд░реЛрдЧреНрдп рд╕рд▓реНрд▓реЗ рдЖрдгрд┐ рд╕рд╣рд╛рдпреНрдп\n\nрдЖрдЬ рдореА рддреБрдордЪреА рдХрд╢реА рдорджрдд рдХрд░реВ рд╢рдХрддреЛ?",
      ta: "ЁЯй║ ро╡рогроХрпНроХроорпН! роиро╛ройрпН HopeLink роЗройрпН AI роЪрпБроХро╛родро╛ро░ роЙродро╡ро┐ропро╛ро│ро░рпН. роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН:\n\nтАв родро▓роЪрпАрооро┐ропро╛ рокро▒рпНро▒ро┐роп рооро░рпБродрпНродрпБро╡ родроХро╡ро▓рпН\nтАв роЗро░родрпНрод родро╛рой ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН\nтАв роЕро╡роЪро░ роЙродро╡ро┐\nтАв рооро░рпБродрпНродрпБро╡рооройрпИ роЗроЯроЩрпНроХро│рпН\nтАв роЪрпБроХро╛родро╛ро░ роЖро▓рпЛроЪройрпИроХро│рпН рооро▒рпНро▒рпБроорпН роЖродро░ро╡рпБ\n\nроЗройрпНро▒рпБ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?",
      bn: "ЁЯй║ рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ HopeLink ржПрж░ AI рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж┐ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐:\n\nтАв ржерзНржпрж╛рж▓рж╛рж╕рзЗржорж┐ржпрж╝рж╛ рж╕ржорзНржкрж░рзНржХрзЗ ржЪрж┐ржХрж┐рзОрж╕рж╛ рждржерзНржп\nтАв рж░ржХрзНрждржжрж╛ржи ржирж┐рж░рзНржжрзЗрж╢ржирж╛\nтАв ржЬрж░рзБрж░рж┐ рж╕рж╣рж╛ржпрж╝рждрж╛\nтАв рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗрж░ ржЕржмрж╕рзНржерж╛ржи\nтАв рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢ ржПржмржВ рж╕рж╣рж╛ржпрж╝рждрж╛\n\nржЖржЬ ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
    }
    return welcomeMessages[lang] || welcomeMessages.en
  }

  const generateBotResponse = async (userMessage: string): Promise<string> => {
    const message = userMessage.toLowerCase()

    // Emergency responses
    if (
      message.includes("emergency") ||
      message.includes("urgent") ||
      message.includes("help") ||
      message.includes("pain")
    ) {
      return getEmergencyResponse(currentLanguage)
    }

    // Blood-related queries
    if (message.includes("blood") || message.includes("donation") || message.includes("donor")) {
      return getBloodResponse(currentLanguage)
    }

    // Thalassemia information
    if (message.includes("thalassemia") || message.includes("thalassaemia")) {
      return getThalassemiaResponse(currentLanguage)
    }

    // Hospital/location queries
    if (message.includes("hospital") || message.includes("location") || message.includes("near")) {
      return getHospitalResponse(currentLanguage)
    }

    // Symptoms
    if (
      message.includes("symptom") ||
      message.includes("fever") ||
      message.includes("tired") ||
      message.includes("weak")
    ) {
      return getSymptomResponse(currentLanguage)
    }

    // Default response
    return getDefaultResponse(currentLanguage)
  }

  const getEmergencyResponse = (lang: string): string => {
    const responses: { [key: string]: string } = {
      en: "ЁЯЪи EMERGENCY ALERT ЁЯЪи\n\nIf this is a medical emergency:\nтАв Call 108 (India) or your local emergency number immediately\nтАв For blood-related emergencies, contact the nearest hospital\nтАв Use our Emergency SOS feature in the app\nтАв Share your location with emergency contacts\n\nI can help you find the nearest hospital with blood availability. Would you like me to do that?",
      hi: "ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдЪреЗрддрд╛рд╡рдиреА ЁЯЪи\n\nрдпрджрд┐ рдпрд╣ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЖрдкрд╛рддрдХрд╛рд▓ рд╣реИ:\nтАв рддреБрд░рдВрдд 108 рдпрд╛ рдЕрдкрдирд╛ рд╕реНрдерд╛рдиреАрдп рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдирдВрдмрд░ рдХреЙрд▓ рдХрд░реЗрдВ\nтАв рд░рдХреНрдд рд╕рдВрдмрдВрдзреА рдЖрдкрд╛рддрдХрд╛рд▓ рдХреЗ рд▓рд┐рдП, рдирд┐рдХрдЯрддрдо рдЕрд╕реНрдкрддрд╛рд▓ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ\nтАв рдРрдк рдореЗрдВ рд╣рдорд╛рд░реА Emergency SOS рд╕реБрд╡рд┐рдзрд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nтАв рдЕрдкрдирд╛ рд╕реНрдерд╛рди рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рдВрдкрд░реНрдХреЛрдВ рдХреЗ рд╕рд╛рде рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ\n\nрдореИрдВ рдЖрдкрдХреЛ рд░рдХреНрдд рдЙрдкрд▓рдмреНрдзрддрд╛ рд╡рд╛рд▓реЗ рдирд┐рдХрдЯрддрдо рдЕрд╕реНрдкрддрд╛рд▓ рдЦреЛрдЬрдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдореИрдВ рдРрд╕рд╛ рдХрд░реВрдВ?",
    }
    return responses[lang] || responses.en
  }

  const getBloodResponse = (lang: string): string => {
    const responses: { [key: string]: string } = {
      en: "ЁЯй╕ Blood Donation & Information:\n\nтАв You can donate blood every 56 days if healthy\nтАв Common blood types: A+, A-, B+, B-, AB+, AB-, O+, O-\nтАв O- is universal donor, AB+ is universal recipient\nтАв Thalassemia patients often need regular transfusions\nтАв Iron chelation therapy helps remove excess iron\n\nWould you like me to:\n1. Find nearby blood banks\n2. Check blood availability\n3. Schedule a donation appointment\n4. Provide more information about blood types?",
      hi: "ЁЯй╕ рд░рдХреНрддрджрд╛рди рдФрд░ рдЬрд╛рдирдХрд╛рд░реА:\n\nтАв рдпрджрд┐ рдЖрдк рд╕реНрд╡рд╕реНрде рд╣реИрдВ рддреЛ рдЖрдк рд╣рд░ 56 рджрд┐рди рдореЗрдВ рд░рдХреНрддрджрд╛рди рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ\nтАв рд╕рд╛рдорд╛рдиреНрдп рд░рдХреНрдд рд╕рдореВрд╣: A+, A-, B+, B-, AB+, AB-, O+, O-\nтАв O- рд╕рд╛рд░реНрд╡рднреМрдорд┐рдХ рджрд╛рддрд╛ рд╣реИ, AB+ рд╕рд╛рд░реНрд╡рднреМрдорд┐рдХ рдкреНрд░рд╛рдкреНрддрдХрд░реНрддрд╛ рд╣реИ\nтАв рдереИрд▓реЗрд╕реАрдорд┐рдпрд╛ рд░реЛрдЧрд┐рдпреЛрдВ рдХреЛ рдЕрдХреНрд╕рд░ рдирд┐рдпрдорд┐рдд рд░рдХреНрдд рдЪрдврд╝рд╛рдиреЗ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрддреА рд╣реИ\nтАв рдЖрдпрд░рди рдЪреЗрд▓реЗрд╢рди рдереЗрд░реЗрдкреА рдЕрддрд┐рд░рд┐рдХреНрдд рдЖрдпрд░рди рд╣рдЯрд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддреА рд╣реИ\n\nрдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдореИрдВ:\n1. рдирдЬрджреАрдХреА рдмреНрд▓рдб рдмреИрдВрдХ рдЦреЛрдЬреВрдВ\n2. рд░рдХреНрдд рдЙрдкрд▓рдмреНрдзрддрд╛ рдЬрд╛рдВрдЪреВрдВ\n3. рджрд╛рди рдХреА рдирд┐рдпреБрдХреНрддрд┐ рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдХрд░реВрдВ\n4. рд░рдХреНрдд рд╕рдореВрд╣реЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░реВрдВ?",
    }
    return responses[lang] || responses.en
  }

  const getThalassemiaResponse = (lang: string): string => {
    const responses: { [key: string]: string } = {
      en: "ЁЯзм Thalassemia Information:\n\nThalassemia is a genetic blood disorder affecting hemoglobin production.\n\n**Types:**\nтАв Alpha Thalassemia\nтАв Beta Thalassemia (Minor, Intermedia, Major)\n\n**Management:**\nтАв Regular blood transfusions\nтАв Iron chelation therapy\nтАв Folic acid supplements\nтАв Healthy diet and lifestyle\nтАв Regular medical monitoring\n\n**HopeLink helps with:**\nтАв Finding compatible donors\nтАв Scheduling transfusions\nтАв Connecting with specialists\nтАв Community support\n\nWould you like specific information about any aspect?",
      hi: "ЁЯзм рдереИрд▓реЗрд╕реАрдорд┐рдпрд╛ рдЬрд╛рдирдХрд╛рд░реА:\n\nрдереИрд▓реЗрд╕реАрдорд┐рдпрд╛ рдПрдХ рдЖрдиреБрд╡рдВрд╢рд┐рдХ рд░рдХреНрдд рд╡рд┐рдХрд╛рд░ рд╣реИ рдЬреЛ рд╣реАрдореЛрдЧреНрд▓реЛрдмрд┐рди рдЙрддреНрдкрд╛рджрди рдХреЛ рдкреНрд░рднрд╛рд╡рд┐рдд рдХрд░рддрд╛ рд╣реИред\n\n**рдкреНрд░рдХрд╛рд░:**\nтАв рдЕрд▓реНрдлрд╛ рдереИрд▓реЗрд╕реАрдорд┐рдпрд╛\nтАв рдмреАрдЯрд╛ рдереИрд▓реЗрд╕реАрдорд┐рдпрд╛ (рдорд╛рдЗрдирд░, рдЗрдВрдЯрд░рдореАрдбрд┐рдпрд╛, рдореЗрдЬрд░)\n\n**рдкреНрд░рдмрдВрдзрди:**\nтАв рдирд┐рдпрдорд┐рдд рд░рдХреНрдд рдЪрдврд╝рд╛рдирд╛\nтАв рдЖрдпрд░рди рдЪреЗрд▓реЗрд╢рди рдереЗрд░реЗрдкреА\nтАв рдлреЛрд▓рд┐рдХ рдПрд╕рд┐рдб рд╕рдкреНрд▓реАрдореЗрдВрдЯ\nтАв рд╕реНрд╡рд╕реНрде рдЖрд╣рд╛рд░ рдФрд░ рдЬреАрд╡рдирд╢реИрд▓реА\nтАв рдирд┐рдпрдорд┐рдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдирд┐рдЧрд░рд╛рдиреА\n\n**HopeLink рдорджрдж рдХрд░рддрд╛ рд╣реИ:**\nтАв рд╕рдВрдЧрдд рджрд╛рддрд╛рдУрдВ рдХреЛ рдЦреЛрдЬрдиреЗ рдореЗрдВ\nтАв рд░рдХреНрдд рдЪрдврд╝рд╛рдиреЗ рдХрд╛ рд╕рдордп рдирд┐рд░реНрдзрд╛рд░рдг\nтАв рд╡рд┐рд╢реЗрд╖рдЬреНрдЮреЛрдВ рд╕реЗ рдЬреБрдбрд╝рдиреЗ рдореЗрдВ\nтАв рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╕рд╣рд╛рдпрддрд╛\n\nрдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕реА рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкрд╣рд▓реВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
    }
    return responses[lang] || responses.en
  }

  const getHospitalResponse = (lang: string): string => {
    const responses: { [key: string]: string } = {
      en: "ЁЯПе Hospital & Location Services:\n\nI can help you find:\nтАв Nearby hospitals with blood banks\nтАв Thalassemia treatment centers\nтАв Emergency medical facilities\nтАв Specialist doctors (Hematologists)\nтАв Blood donation centers\n\n**Features:**\nтАв Real-time blood availability\nтАв Turn-by-turn navigation\nтАв Hospital contact information\nтАв Emergency services\nтАв Appointment booking\n\nWould you like me to find hospitals near your current location?",
      hi: "ЁЯПе рдЕрд╕реНрдкрддрд╛рд▓ рдФрд░ рд╕реНрдерд╛рди рд╕реЗрд╡рд╛рдПрдВ:\n\nрдореИрдВ рдЖрдкрдХреЛ рдЦреЛрдЬрдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:\nтАв рдмреНрд▓рдб рдмреИрдВрдХ рд╡рд╛рд▓реЗ рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓\nтАв рдереИрд▓реЗрд╕реАрдорд┐рдпрд╛ рдЙрдкрдЪрд╛рд░ рдХреЗрдВрджреНрд░\nтАв рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕реБрд╡рд┐рдзрд╛рдПрдВ\nтАв рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдбреЙрдХреНрдЯрд░ (рд╣реЗрдореЗрдЯреЛрд▓реЙрдЬрд┐рд╕реНрдЯ)\nтАв рд░рдХреНрддрджрд╛рди рдХреЗрдВрджреНрд░\n\n**рд╕реБрд╡рд┐рдзрд╛рдПрдВ:**\nтАв рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдордп рд░рдХреНрдд рдЙрдкрд▓рдмреНрдзрддрд╛\nтАв рдореЛрдбрд╝-рджрд░-рдореЛрдбрд╝ рдиреЗрд╡реАрдЧреЗрд╢рди\nтАв рдЕрд╕реНрдкрддрд╛рд▓ рд╕рдВрдкрд░реНрдХ рдЬрд╛рдирдХрд╛рд░реА\nтАв рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдПрдВ\nтАв рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рдмреБрдХрд┐рдВрдЧ\n\nрдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдореИрдВ рдЖрдкрдХреЗ рд╡рд░реНрддрдорд╛рди рд╕реНрдерд╛рди рдХреЗ рдкрд╛рд╕ рдЕрд╕реНрдкрддрд╛рд▓ рдЦреЛрдЬреВрдВ?",
    }
    return responses[lang] || responses.en
  }

  const getSymptomResponse = (lang: string): string => {
    const responses: { [key: string]: string } = {
      en: "тЪХя╕П Symptom Assessment:\n\n**Common Thalassemia symptoms:**\nтАв Fatigue and weakness\nтАв Pale skin or jaundice\nтАв Slow growth (in children)\nтАв Abdominal swelling\nтАв Dark urine\nтАв Bone deformities\n\n**тЪая╕П Important:**\nI can provide general information, but for proper diagnosis and treatment, please consult with a healthcare professional immediately.\n\n**When to seek immediate help:**\nтАв Severe fatigue or weakness\nтАв Difficulty breathing\nтАв Chest pain\nтАв High fever\nтАв Severe abdominal pain\n\nWould you like me to help you find a nearby hospital or specialist?",
      hi: "тЪХя╕П рд▓рдХреНрд╖рдг рдореВрд▓реНрдпрд╛рдВрдХрди:\n\n**рд╕рд╛рдорд╛рдиреНрдп рдереИрд▓реЗрд╕реАрдорд┐рдпрд╛ рд▓рдХреНрд╖рдг:**\nтАв рдердХрд╛рди рдФрд░ рдХрдордЬреЛрд░реА\nтАв рдкреАрд▓реА рддреНрд╡рдЪрд╛ рдпрд╛ рдкреАрд▓рд┐рдпрд╛\nтАв рдзреАрдореА рд╡реГрджреНрдзрд┐ (рдмрдЪреНрдЪреЛрдВ рдореЗрдВ)\nтАв рдкреЗрдЯ рдореЗрдВ рд╕реВрдЬрди\nтАв рдЧрд╣рд░реЗ рд░рдВрдЧ рдХрд╛ рдореВрддреНрд░\nтАв рд╣рдбреНрдбреА рдХреА рд╡рд┐рдХреГрддрд┐\n\n**тЪая╕П рдорд╣рддреНрд╡рдкреВрд░реНрдг:**\nрдореИрдВ рд╕рд╛рдорд╛рдиреНрдп рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ, рд▓реЗрдХрд┐рди рдЙрдЪрд┐рдд рдирд┐рджрд╛рди рдФрд░ рдЙрдкрдЪрд╛рд░ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рддреБрд░рдВрдд рдХрд┐рд╕реА рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред\n\n**рддрддреНрдХрд╛рд▓ рдорджрдж рдХрдм рд▓реЗрдВ:**\nтАв рдЧрдВрднреАрд░ рдердХрд╛рди рдпрд╛ рдХрдордЬреЛрд░реА\nтАв рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ\nтАв рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж\nтАв рддреЗрдЬ рдмреБрдЦрд╛рд░\nтАв рдЧрдВрднреАрд░ рдкреЗрдЯ рджрд░реНрдж\n\nрдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдореИрдВ рдЖрдкрдХреЛ рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓ рдпрд╛ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдЦреЛрдЬрдиреЗ рдореЗрдВ рдорджрдж рдХрд░реВрдВ?",
    }
    return responses[lang] || responses.en
  }

  const getDefaultResponse = (lang: string): string => {
    const responses: { [key: string]: string } = {
      en: "I'm here to help with your health and medical questions related to Thalassemia and blood disorders. I can assist with:\n\nЁЯй║ Medical information\nЁЯй╕ Blood donation guidance\nЁЯПе Hospital locations\nЁЯЪи Emergency assistance\nЁЯТК Treatment information\nЁЯСе Community support\n\nPlease let me know what specific information you're looking for, and I'll do my best to help you!",
      hi: "рдореИрдВ рдереИрд▓реЗрд╕реАрдорд┐рдпрд╛ рдФрд░ рд░рдХреНрдд рд╡рд┐рдХрд╛рд░реЛрдВ рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдЖрдкрдХреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдФрд░ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдкреНрд░рд╢реНрдиреЛрдВ рдореЗрдВ рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред рдореИрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:\n\nЁЯй║ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЬрд╛рдирдХрд╛рд░реА\nЁЯй╕ рд░рдХреНрддрджрд╛рди рдорд╛рд░реНрдЧрджрд░реНрд╢рди\nЁЯПе рдЕрд╕реНрдкрддрд╛рд▓ рд╕реНрдерд╛рди\nЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛\nЁЯТК рдЙрдкрдЪрд╛рд░ рдЬрд╛рдирдХрд╛рд░реА\nЁЯСе рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╕рд╣рд╛рдпрддрд╛\n\nрдХреГрдкрдпрд╛ рдореБрдЭреЗ рдмрддрд╛рдПрдВ рдХрд┐ рдЖрдк рдХрд┐рд╕ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЬрд╛рдирдХрд╛рд░реА рдХреА рддрд▓рд╛рд╢ рдХрд░ рд░рд╣реЗ рд╣реИрдВ, рдФрд░ рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреА рдкреВрд░реА рдХреЛрд╢рд┐рд╢ рдХрд░реВрдВрдЧрд╛!",
    }
    return responses[lang] || responses.en
  }

  const handleSendMessage = async () => {
    if (!inputText.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      sender: "user",
      timestamp: new Date(),
      language: currentLanguage,
    }

    setMessages((prev) => [...prev, userMessage])
    setInputText("")
    setIsLoading(true)

    // Simulate AI processing time
    setTimeout(async () => {
      const botResponse = await generateBotResponse(inputText)
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        sender: "bot",
        timestamp: new Date(),
        language: currentLanguage,
      }

      setMessages((prev) => [...prev, botMessage])
      setIsLoading(false)

      // Auto-speak bot response if speech is enabled
      if (isSpeaking) {
        speakText(botResponse)
      }
    }, 1500)
  }

  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      setIsListening(true)
      try {
        recognitionRef.current.start()
      } catch (error) {
        setIsListening(false)
      }
    }
  }

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop()
      setIsListening(false)
    }
  }

  const speakText = (text: string) => {
    if (typeof window !== "undefined" && "speechSynthesis" in window) {
      // Cancel any ongoing speech
      window.speechSynthesis.cancel()

      const utterance = new SpeechSynthesisUtterance(text)
      utterance.lang = getLanguageCode(currentLanguage)
      utterance.rate = 0.8
      utterance.pitch = 1
      utterance.volume = 0.8

      utterance.onend = () => {
        setIsSpeaking(false)
      }

      window.speechSynthesis.speak(utterance)
    }
  }

  const toggleSpeech = () => {
    if (isSpeaking) {
      if (typeof window !== "undefined" && "speechSynthesis" in window) {
        window.speechSynthesis.cancel()
      }
      setIsSpeaking(false)
    } else {
      setIsSpeaking(true)
    }
  }

  const openChat = () => {
    setIsOpen(true)
    setHasNewMessage(false)
  }

  const closeChat = () => {
    setIsOpen(false)
    setIsMinimized(false)
  }

  // Floating button when chat is closed
  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={openChat}
          className={`h-16 w-16 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-2xl transition-all duration-300 transform hover:scale-110 ${
            hasNewMessage ? "animate-bounce" : ""
          }`}
        >
          <div className="relative">
            <MessageCircle className="h-8 w-8 text-white" />
            {hasNewMessage && (
              <div className="absolute -top-2 -right-2 h-4 w-4 bg-red-500 rounded-full flex items-center justify-center">
                <div className="h-2 w-2 bg-white rounded-full animate-pulse"></div>
              </div>
            )}
          </div>
        </Button>

        {hasNewMessage && (
          <div className="absolute bottom-20 right-0 bg-white rounded-lg shadow-lg p-3 max-w-xs border-l-4 border-blue-500 animate-slide-up">
            <div className="flex items-center gap-2">
              <Bot className="h-4 w-4 text-blue-600" />
              <span className="text-sm font-medium text-gray-800">New message from AI Assistant</span>
            </div>
          </div>
        )}
      </div>
    )
  }

  // Chat interface when open
  return (
    <div
      className={`fixed bottom-6 right-6 z-50 transition-all duration-300 ${
        isMinimized ? "w-80 h-16" : "w-96 h-[600px]"
      }`}
    >
      <Card className="h-full shadow-2xl border-2 border-blue-200 bg-white/95 backdrop-blur-sm">
        <CardHeader className="pb-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-t-lg">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2 text-white">
              <div className="relative">
                <Heart className="h-5 w-5 text-red-300" />
                <div className="absolute inset-0 animate-ping">
                  <Heart className="h-5 w-5 text-red-300 opacity-75" />
                </div>
              </div>
              <span className="text-sm font-semibold">HopeLink AI Assistant</span>
            </CardTitle>
            <div className="flex items-center gap-1">
              <Button
                size="sm"
                variant="ghost"
                onClick={() => setIsMinimized(!isMinimized)}
                className="text-white hover:bg-white/20 h-8 w-8 p-0"
              >
                {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
              </Button>
              <Button
                size="sm"
                variant="ghost"
                onClick={closeChat}
                className="text-white hover:bg-white/20 h-8 w-8 p-0"
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {!isMinimized && (
            <div className="flex items-center justify-between mt-2">
              <Badge variant="secondary" className="bg-white/20 text-white border-white/30">
                <div className="flex items-center gap-1">
                  <div className="h-2 w-2 bg-green-400 rounded-full animate-pulse"></div>
                  Online
                </div>
              </Badge>
              <div className="flex items-center gap-2">
                <select
                  value={currentLanguage}
                  onChange={(e) => setCurrentLanguage(e.target.value)}
                  className="text-xs bg-white/20 text-white border border-white/30 rounded px-2 py-1 backdrop-blur-sm"
                >
                  {languages.map((lang) => (
                    <option key={lang.code} value={lang.code} className="text-gray-800">
                      {lang.flag} {lang.name}
                    </option>
                  ))}
                </select>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={toggleSpeech}
                  className={`text-white hover:bg-white/20 h-8 w-8 p-0 ${isSpeaking ? "bg-white/20" : ""}`}
                >
                  {isSpeaking ? <Volume2 className="h-4 w-4" /> : <VolumeX className="h-4 w-4" />}
                </Button>
              </div>
            </div>
          )}
        </CardHeader>

        {!isMinimized && (
          <CardContent className="flex-1 flex flex-col p-0 h-full">
            <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
              <div className="space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
                  >
                    <div
                      className={`max-w-[85%] rounded-2xl p-3 shadow-sm ${
                        message.sender === "user"
                          ? "bg-gradient-to-r from-blue-600 to-purple-600 text-white"
                          : "bg-gray-100 text-gray-900 border border-gray-200"
                      }`}
                    >
                      <div className="flex items-start gap-2">
                        {message.sender === "bot" && (
                          <div className="flex-shrink-0 mt-0.5">
                            <div className="h-6 w-6 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
                              <Bot className="h-3 w-3 text-white" />
                            </div>
                          </div>
                        )}
                        {message.sender === "user" && (
                          <div className="flex-shrink-0 mt-0.5">
                            <div className="h-6 w-6 bg-white/20 rounded-full flex items-center justify-center">
                              <User className="h-3 w-3 text-white" />
                            </div>
                          </div>
                        )}
                        <div className="flex-1">
                          <p className="text-sm whitespace-pre-line leading-relaxed">{message.text}</p>
                          <p className="text-xs opacity-70 mt-1">{message.timestamp.toLocaleTimeString()}</p>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}

                {isLoading && (
                  <div className="flex justify-start">
                    <div className="bg-gray-100 rounded-2xl p-3 max-w-[85%] border border-gray-200">
                      <div className="flex items-center gap-2">
                        <div className="h-6 w-6 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
                          <Bot className="h-3 w-3 text-white" />
                        </div>
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div
                            className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                            style={{ animationDelay: "0.1s" }}
                          ></div>
                          <div
                            className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                            style={{ animationDelay: "0.2s" }}
                          ></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </ScrollArea>

            <div className="p-4 border-t bg-gray-50/50">
              <div className="flex items-center gap-2">
                <div className="flex-1 flex items-center gap-2 bg-white border border-gray-200 rounded-full px-3 py-2 shadow-sm">
                  <Input
                    value={inputText}
                    onChange={(e) => setInputText(e.target.value)}
                    placeholder={
                      currentLanguage === "hi"
                        ? "рдЕрдкрдирд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреНрд░рд╢реНрди рдЯрд╛рдЗрдк рдХрд░реЗрдВ..."
                        : currentLanguage === "mr"
                          ? "рддреБрдордЪрд╛ рдЖрд░реЛрдЧреНрдп рдкреНрд░рд╢реНрди рдЯрд╛рдЗрдк рдХрд░рд╛..."
                          : "Type your health question..."
                    }
                    onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                    className="border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 text-sm"
                  />
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={isListening ? stopListening : startListening}
                    className={`h-8 w-8 p-0 ${isListening ? "text-red-600 bg-red-50" : "text-gray-500 hover:text-gray-700"}`}
                    disabled={!recognitionRef.current}
                  >
                    {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                  </Button>
                </div>
                <Button
                  onClick={handleSendMessage}
                  disabled={!inputText.trim() || isLoading}
                  className="h-10 w-10 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg"
                >
                  <Send className="h-4 w-4" />
                </Button>
              </div>

              <div className="flex items-center justify-center mt-2 gap-4 text-xs text-gray-500">
                <div className="flex items-center gap-1">
                  <Phone className="h-3 w-3" />
                  <span>Emergency: 108</span>
                </div>
                <div className="flex items-center gap-1">
                  <Heart className="h-3 w-3 text-red-500" />
                  <span>Powered by HopeLink AI</span>
                </div>
              </div>
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  )
}
